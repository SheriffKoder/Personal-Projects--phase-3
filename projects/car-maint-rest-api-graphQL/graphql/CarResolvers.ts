import { NextFunction, Request, Response } from "express";
const {validationResult} = require("express-validator");
import CarModel, { CarDocument } from "../models/carModel";
import UserModel from "../models/userModel";

// (req: Request, res:Response, next: NextFunction)

const today = new Date();
const todayString = today.getFullYear() + "-" + today.getMonth()+1 + "-" + today.getDate();

import { clearImage } from "../util/clearImage";

//API 0.2 - user model car object
interface Request_With_UserId_Token extends Request {
    userId: string,
    token: string,
    isAuth: boolean,
}


//API 0.2 - authentication
//API 0.2 - images



module.exports = {

    //arguments objects, request
    //to be used as args.userInput or {userInput} right away
    addCar: async function (args:any, req:Request_With_UserId_Token) {


        //API 0.3 - GraphQL - Authentication
        if (!req.isAuth) {
            const error = new Error("Not Authenticated to add a car");
            throw error;
        }

        const {brand, carModel, userId, image} = args.carInput;
        console.log(args);
        // console.log(name);

        // let imageUrl =  "/images/car1.png";
        // if (imageUrl !== "") {
        //     imageUrl = "/"+image;
        // }
            
        const newCar = await new CarModel({
            brand: brand,
            carModel: carModel,
            userId: req.userId,
            // API 0.2 - images
            //the path is generated by multer as it was stored on the server
            image: image,
        });
    
        const addedCar = await newCar.save();
        // console.log(newCar);

        //API 0.2 - user model car object
        //the req is already given the userId in the isAuth middleware when 
        //passing a successful request on the route before accessing this middleware
        const user = await UserModel.findById(req.userId);
        if (user) {
            user.cars.push(newCar);
            const updatedUser = await user.save();
            console.log(req.token);
            return {...updatedUser._doc, _id: updatedUser._id.toString(), cars:updatedUser.cars, token: req.token};

        }

        // return {text:"hello"};


    },

    editCar: async function (args:any, req:Request_With_UserId_Token) {


        //API 0.3 - GraphQL - Authentication
        if (!req.isAuth) {
            const error = new Error("Not Authenticated to edit a car");
            throw error;
        }

        const {brand, carModel, image, _id} = args.carInput;
        console.log(args);
        // console.log(name);

        const currentCar = await CarModel.findById(_id);



        if (currentCar) {

            // console.log(req.userId);
            // console.log(currentCar.userId);
            //API 0.2 - authentication
            //check the ownership of the currently logged in user accessing this middleware
            //the req.userId is set when accessing isAuth checker
            //which is taken from the token created on login
            if (currentCar.userId.toString() !== req.userId.toString()) {
                const error = new Error("Not Authorized to edit car");
                throw error;
            }




            currentCar.brand = brand;
            currentCar.carModel = carModel;

            //API 0.2 - images
            // if there is a file in the request given by multer
            const oldImage = currentCar.image;


            const updatedCar = await currentCar.save();

            if (image !== oldImage) {
                clearImage(oldImage);
            }

            const user = await UserModel.findById(req.userId);

            if (user) {
                return {...user._doc, _id: user._id.toString(), cars:updatedCar, token: req.token};

            }

        }

    },


    dummyQuery: async function (args: any, req:Request) {

       return {text:"hello"};
                
    }





}