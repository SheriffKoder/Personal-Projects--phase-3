import { NextFunction, Request, Response } from "express";
const {validationResult} = require("express-validator");
import CarModel, { CarDocument } from "../models/carModel";
import UserModel from "../models/userModel";

// (req: Request, res:Response, next: NextFunction)

const today = new Date();

const thisMonth = today.getMonth()+1;
const todayString = today.getFullYear() + "-" + thisMonth + "-" + today.getDate();

import { clearImage } from "../util/clearImage";

//API 0.2 - user model car object
interface Request_With_UserId_Token extends Request {
    userId: string,
    token: string,
    isAuth: boolean,
}


//API 0.2 - authentication
//API 0.2 - images



module.exports = {

    //arguments objects, request
    //to be used as args.userInput or {userInput} right away
    addEditDeleteCar: async function (args:any, req:Request_With_UserId_Token) {


        //API 0.3 - GraphQL - Authentication
        if (!req.isAuth) {
            const error = new Error("Not Authenticated to update the car");
            throw error;
        }

        const {brand, carModel, image, _id, action} = args.carInput;
        console.log(args);
        // console.log(name);


        if (action === "add") {

            const newCar = await new CarModel({
                brand: brand,
                carModel: carModel,
                userId: req.userId,
                // API 0.2 - images
                //the path is generated by multer as it was stored on the server
                image: image,
            });
        
            const addedCar = await newCar.save();
            // console.log(newCar);
    
            //API 0.2 - user model car object
            //the req is already given the userId in the isAuth middleware when 
            //passing a successful request on the route before accessing this middleware
            const user = await UserModel.findById(req.userId);
            if (user) {
                user.cars.push(newCar);
                const updatedUser = await user.save();
                console.log(req.token);
                return {...updatedUser._doc, _id: updatedUser._id.toString(), cars:updatedUser.cars, token: req.token};
    
            }
        } 
        
        else if (action === "edit") {
            
            const currentCar = await CarModel.findById(_id);

            if (currentCar) {

                // console.log(req.userId);
                // console.log(currentCar.userId);
                //API 0.2 - authentication
                //check the ownership of the currently logged in user accessing this middleware
                //the req.userId is set when accessing isAuth checker
                //which is taken from the token created on login
                if (currentCar.userId.toString() !== req.userId.toString()) {
                    const error = new Error("Not Authorized to edit car");
                    throw error;
                }


                currentCar.brand = brand;
                currentCar.carModel = carModel;

                //API 0.2 - images
                // if there is a file in the request given by multer
                const oldImage = currentCar.image;
                currentCar.image = image;


                const updatedCar = await currentCar.save();

                if (image !== oldImage && oldImage !== "") {
                    clearImage(oldImage);
                }

                const user = await UserModel.findById(req.userId).populate("cars");

                if (user) {
                    // console.log(user.cars);

                    return {...user._doc, _id: user._id.toString(), cars:user.cars, token: req.token};

                }

            }

        } else if (action === "delete") {

            const currentCar = await CarModel.findById(_id);

            if (!currentCar) {
                const error = new Error("Car to be deleted is not found");
                throw error;       
            } else {


                if (currentCar.userId.toString() !== req.userId.toString()) {
                    const error = new Error("Not authorized");
                    throw error;     
                }

                //API 0.2 - images
                //remove the image file
                clearImage(currentCar.image);

                //remove the car from the DB
                await CarModel.findByIdAndDelete(_id);

                //API 0.2 - user's car object model
                //remove the car from the user's cars
                const user = await UserModel.findById(req.userId);
                if (user) {
                    // user?.cars.pull(_id);    //pull does not exist on user.cars ?
                    user.cars = user.cars.filter((car) => car.toString() !== _id );
                    const updatedUser = await user.save();
                    return {...updatedUser._doc, _id: updatedUser._id.toString(), cars:updatedUser.cars, token: req.token};

                }

            }
        }
       

        // return {text:"hello"};


    },



    dummyQuery: async function (args: any, req:Request) {

       return {text:"hello"};
                
    }





}