"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const { validationResult } = require("express-validator");
const carModel_1 = __importDefault(require("../models/carModel"));
const userModel_1 = __importDefault(require("../models/userModel"));
// (req: Request, res:Response, next: NextFunction)
const today = new Date();
const todayString = today.getFullYear() + "-" + today.getMonth() + 1 + "-" + today.getDate();
const clearImage_1 = require("../util/clearImage");
//API 0.2 - authentication
//API 0.2 - images
module.exports = {
    //arguments objects, request
    //to be used as args.userInput or {userInput} right away
    addCar: function (args, req) {
        return __awaiter(this, void 0, void 0, function* () {
            //API 0.3 - GraphQL - Authentication
            if (!req.isAuth) {
                const error = new Error("Not Authenticated to add a car");
                throw error;
            }
            const { brand, carModel, userId, image } = args.carInput;
            console.log(args);
            // console.log(name);
            // let imageUrl =  "/images/car1.png";
            // if (imageUrl !== "") {
            //     imageUrl = "/"+image;
            // }
            const newCar = yield new carModel_1.default({
                brand: brand,
                carModel: carModel,
                userId: req.userId,
                // API 0.2 - images
                //the path is generated by multer as it was stored on the server
                image: image,
            });
            const addedCar = yield newCar.save();
            // console.log(newCar);
            //API 0.2 - user model car object
            //the req is already given the userId in the isAuth middleware when 
            //passing a successful request on the route before accessing this middleware
            const user = yield userModel_1.default.findById(req.userId);
            if (user) {
                user.cars.push(newCar);
                const updatedUser = yield user.save();
                console.log(req.token);
                return Object.assign(Object.assign({}, updatedUser._doc), { _id: updatedUser._id.toString(), cars: updatedUser.cars, token: req.token });
            }
            // return {text:"hello"};
        });
    },
    editCar: function (args, req) {
        return __awaiter(this, void 0, void 0, function* () {
            //API 0.3 - GraphQL - Authentication
            if (!req.isAuth) {
                const error = new Error("Not Authenticated to edit a car");
                throw error;
            }
            const { brand, carModel, image, _id } = args.carInput;
            console.log(args);
            // console.log(name);
            const currentCar = yield carModel_1.default.findById(_id);
            if (currentCar) {
                // console.log(req.userId);
                // console.log(currentCar.userId);
                //API 0.2 - authentication
                //check the ownership of the currently logged in user accessing this middleware
                //the req.userId is set when accessing isAuth checker
                //which is taken from the token created on login
                if (currentCar.userId.toString() !== req.userId.toString()) {
                    const error = new Error("Not Authorized to edit car");
                    throw error;
                }
                currentCar.brand = brand;
                currentCar.carModel = carModel;
                //API 0.2 - images
                // if there is a file in the request given by multer
                const oldImage = currentCar.image;
                const updatedCar = yield currentCar.save();
                if (image !== oldImage) {
                    (0, clearImage_1.clearImage)(oldImage);
                }
                const user = yield userModel_1.default.findById(req.userId);
                if (user) {
                    return Object.assign(Object.assign({}, user._doc), { _id: user._id.toString(), cars: updatedCar, token: req.token });
                }
            }
        });
    },
    dummyQuery: function (args, req) {
        return __awaiter(this, void 0, void 0, function* () {
            return { text: "hello" };
        });
    }
};
